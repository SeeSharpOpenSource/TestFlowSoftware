<?xml version="1.0"?>
<doc>
    <assembly>
        <name>tfutil</name>
    </assembly>
    <members>
        <member name="T:Testflow.Utility.Collections.SerializableMap`2">
            <summary>
            可序列化的Map集合
            </summary>
        </member>
        <member name="M:Testflow.Utility.Collections.SerializableMap`2.#ctor(System.Int32)">
            <summary>
            创建序列化Map的实例
            </summary>
        </member>
        <member name="T:Testflow.Utility.Controls.ErrorInfoForm">
            <summary>
            错误窗体
            </summary>
        </member>
        <member name="M:Testflow.Utility.Controls.ErrorInfoForm.ShowErrorInfoForm(System.String,System.String,System.Exception)">
            <summary>
            显示错误信息窗体
            </summary>
        </member>
        <member name="M:Testflow.Utility.Controls.ErrorInfoForm.ShowErrorInfoDialog(System.String,System.String,System.Exception)">
            <summary>
            显示错误信息对话框
            </summary>
        </member>
        <member name="M:Testflow.Utility.Controls.ErrorInfoForm.#ctor(System.String,System.String,System.Exception)">
            <summary>
            创建错误窗体实例
            </summary>
        </member>
        <member name="F:Testflow.Utility.Controls.ErrorInfoForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Testflow.Utility.Controls.ErrorInfoForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Testflow.Utility.Controls.ErrorInfoForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Testflow.Utility.Expression.AmbiguousPoint">
            <summary>
            表达式出现歧义的位置
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.AmbiguousPoint.ElementIndex">
            <summary>
            歧义点所在的索引号
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.AmbiguousPoint.OperatorStackLength">
            <summary>
            操作符栈的深度
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.AmbiguousPoint.ExpressionCacheLength">
            <summary>
            表达式缓存长度
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.AmbiguousPoint.LeftArgument">
            <summary>
            当前待处理的参数
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.AmbiguousPoint.OperatorStack">
            <summary>
            分歧点堆栈
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.AmbiguousPoint.CurrentOperator">
            <summary>
            当前的操作符实例
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.AmbiguousPoint.PossibleTokens">
            <summary>
            歧义点剩余可取的符号。运算符在指定位置如果出现歧义，则在该缓存中保存一个list用于保存仍未尝试过的运算符,key为歧义点的索引
            </summary>
        </member>
        <member name="T:Testflow.Utility.Expression.ExpressionData">
            <summary>
            表达式数据
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.ExpressionData.Name">
            <summary>
            表达式的名称
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.ExpressionData.Parent">
            <summary>
            表达式的上级节点
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.ExpressionData.Source">
            <summary>
            表达式中的源
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.ExpressionData.Arguments">
            <summary>
            表达式中的目标
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.ExpressionData.Operation">
            <summary>
            表达式的名称
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.ExpressionData.ExpressionValue">
            <summary>
            表达式计算后的值
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.ExpressionData.IsValueSet">
            <summary>
            表达式的值是否已经被配置
            </summary>
        </member>
        <member name="T:Testflow.Utility.Expression.ExpressionElement">
            <summary>
            表达式元素
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.ExpressionElement.Type">
            <summary>
            表达式元素的类型
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.ExpressionElement.Value">
            <summary>
            表达式元素的值，仅在Type为Value或Variable时生效
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.ExpressionElement.Expression">
            <summary>
            表达式元素的值，仅在Type为Expression时生效
            </summary>
        </member>
        <member name="T:Testflow.Utility.Expression.ExpressionParser">
            <summary>
            表达式解析类
            </summary>
        </member>
        <member name="M:Testflow.Utility.Expression.ExpressionParser.#ctor(System.Collections.Generic.Dictionary{System.String,Testflow.Data.Expression.ExpressionOperatorInfo})">
            <summary>
            使用操作符信息初始化解析器
            </summary>
            <param name="operatorInfoMapping">操作符名到描述信息的映射</param>
        </member>
        <member name="M:Testflow.Utility.Expression.ExpressionParser.#ctor(System.Collections.Generic.IEnumerable{Testflow.Data.Expression.ExpressionOperatorInfo},System.Int32)">
            <summary>
            使用操作符信息初始化解析器
            </summary>
            <param name="operatorInfos">操作符描述信息</param>
            <param name="operatorCount">操作符个数</param>
        </member>
        <member name="M:Testflow.Utility.Expression.ExpressionParser.ParseExpression(System.String,Testflow.Data.Sequence.ISequenceStep)">
            <summary>
            解析表达式并校验变量
            </summary>
        </member>
        <member name="M:Testflow.Utility.Expression.ExpressionParser.ParseExpression(System.String,Testflow.Data.Sequence.ISequence)">
            <summary>
            解析表达式并校验变量
            </summary>
        </member>
        <member name="M:Testflow.Utility.Expression.ExpressionParser.ParseExpression(System.String)">
            <summary>
            解析表达式
            </summary>
        </member>
        <member name="M:Testflow.Utility.Expression.ExpressionParser.IsExpression(System.String)">
            <summary>
            获取当前参数配置是否为表达式
            </summary>
        </member>
        <member name="T:Testflow.Utility.Expression.OperatorTokenInfo">
            <summary>
            运算符的符号信息
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.OperatorTokenInfo.OperatorName">
            <summary>
            运算符名称
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.OperatorTokenInfo.OperatorPattern">
            <summary>
            运算符模式
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.OperatorTokenInfo.TokenGroup">
            <summary>
            运算符符号集合
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.OperatorTokenInfo.HasLeftElement">
            <summary>
            运算符左侧是否包含元素
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.OperatorTokenInfo.HasRightElement">
            <summary>
            运算符右侧是否包含元素
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.OperatorTokenInfo.Index">
            <summary>
            当前符号描述信息在整体列表中的索引
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.OperatorTokenInfo.ArgumentCount">
            <summary>
            参数个数
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.OperatorTokenInfo.Priority">
            <summary>
            运算优先级
            </summary>
        </member>
        <member name="T:Testflow.Utility.Expression.OperatorInstance">
            <summary>
            单个表达式符号遍历状态
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.OperatorInstance.StartIndex">
            <summary>
            当前符号在分割缓存中的起始索引
            </summary>
        </member>
        <member name="P:Testflow.Utility.Expression.OperatorInstance.Arguments">
            <summary>
            写入的参数
            </summary>
        </member>
        <member name="T:Testflow.Utility.Expression.ParserStateMachine">
            <summary>
            表达式解析状态机
            </summary>
        </member>
        <member name="F:Testflow.Utility.Expression.ParserStateMachine._currentOperator">
            <summary>
            当前检查的运算符
            </summary>
        </member>
        <member name="F:Testflow.Utility.Expression.ParserStateMachine._operatorStack">
            <summary>
            运算符解析栈
            </summary>
        </member>
        <member name="F:Testflow.Utility.Expression.ParserStateMachine._ambiguousStack">
            <summary>
            运算符解析出现歧义点的栈
            </summary>
        </member>
        <member name="F:Testflow.Utility.Expression.ParserStateMachine._expressionCache">
            <summary>
            临时表达式缓存
            </summary>
        </member>
        <member name="F:Testflow.Utility.Expression.ParserStateMachine._expressionIndex">
            <summary>
            临时表达式下一个可用的索引号
            </summary>
        </member>
        <member name="F:Testflow.Utility.Expression.ParserStateMachine._elementIndex">
            <summary>
            当前遍历到的元素索引
            </summary>
        </member>
        <member name="F:Testflow.Utility.Expression.ParserStateMachine._splitExpression">
            <summary>
            待处理的表达式
            </summary>
        </member>
        <member name="F:Testflow.Utility.Expression.ParserStateMachine._leftArgument">
            <summary>
            待处理的参数值
            </summary>
        </member>
        <member name="F:Testflow.Utility.Expression.ParserStateMachine._lastAmbiguousPointToken">
            <summary>
            在AmbiguousStack执行Pop后会将上次歧义点的下一个可用操作符传递给该字段，该字段在调用GetAvailableToken方法后会被置为null。
            </summary>
        </member>
        <member name="F:Testflow.Utility.Expression.ParserStateMachine._fetchTokenInfoCache">
            <summary>
            获取可用符号的缓存
            </summary>
        </member>
        <member name="M:Testflow.Utility.Expression.ParserStateMachine.UpdateNameAndAddToCache(Testflow.Data.Expression.IExpressionData)">
            <summary>
            更新表达式名称并将表达式写入缓存
            </summary>
        </member>
        <member name="T:Testflow.Utility.MessageUtil.JsonMessageFormatter">
            <summary>
            Json格式化器
            </summary>
        </member>
        <member name="T:Testflow.Utility.MessageUtil.IMessageConsumer">
            <summary>
            消息的消费者接口
            </summary>
        </member>
        <member name="P:Testflow.Utility.MessageUtil.IMessageConsumer.SessionId">
            <summary>
            会话ID
            </summary>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.IMessageConsumer.Handle(Testflow.Utility.MessageUtil.IMessage)">
            <summary>
            处理接收到的消息
            </summary>
            <param name="message">待处理的消息</param>
        </member>
        <member name="T:Testflow.Utility.MessageUtil.IMessage">
            <summary>
            消息类
            </summary>
        </member>
        <member name="P:Testflow.Utility.MessageUtil.IMessage.Id">
            <summary>
            会话ID
            </summary>
        </member>
        <member name="T:Testflow.Utility.MessageUtil.MessageDispatcher">
            <summary>
            消息分发器
            </summary>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.MessageDispatcher.DispatchMessage(Testflow.Utility.MessageUtil.IMessage)">
            <summary>
            消息分发
            </summary>
        </member>
        <member name="T:Testflow.Utility.MessageUtil.Messenger">
            <summary>
            信使类
            </summary>
        </member>
        <member name="T:Testflow.Utility.MessageUtil.Messenger.MessageReceivedAction">
            <summary>
            接收到消息后的委托
            </summary>
            <param name="args"></param>
        </member>
        <member name="E:Testflow.Utility.MessageUtil.Messenger.MessageReceived">
            <summary>
            接收到消息后的事件
            </summary>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.Messenger.OnMessageReceived(Testflow.Utility.MessageUtil.IMessage)">
            <summary>
            事件回调
            </summary>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.Messenger.GetMessenger(Testflow.Utility.MessageUtil.MessengerOption)">
            <summary>
            使用option获取已配置的信使类
            </summary>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.Messenger.Exist(Testflow.Utility.MessageUtil.MessengerOption)">
            <summary>
            是否包含某个Messenger的声明
            </summary>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.Messenger.#ctor(Testflow.Utility.MessageUtil.MessengerOption)">
            <summary>
            常见Messanger抽象类
            </summary>
            <param name="option"></param>
        </member>
        <member name="P:Testflow.Utility.MessageUtil.Messenger.Option">
            <summary>
            信使类的选项
            </summary>
        </member>
        <member name="P:Testflow.Utility.MessageUtil.Messenger.MessageCount">
            <summary>
            当前未消化的消息数量
            </summary>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.Messenger.Initialize">
            <summary>
            初始化信使类
            </summary>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.Messenger.RegisterConsumer(Testflow.Utility.MessageUtil.IMessageConsumer[])">
            <summary>
            注册消费者，数据接收端调用
            </summary>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.Messenger.UnregisterConsumer(Testflow.Utility.MessageUtil.IMessageConsumer[])">
            <summary>
            取消注册消费者，数据接收端调用
            </summary>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.Messenger.Receive(System.Type[])">
            <summary>
            接收信息，未添加高阶参数配置，后续再更新
            </summary>
            <param name="targetTypes">目标数据类型</param>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.Messenger.Peak(System.Type[])">
            <summary>
            查看当前Message但是不取出
            </summary>
            <param name="targetTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.Messenger.Send(Testflow.Utility.MessageUtil.IMessage)">
            <summary>
            发送消息，未添加高阶配置，后续再更新
            </summary>
            <param name="message">待发送的消息</param>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.Messenger.InitializeMessageQueue">
            <summary>
            初始化消息队列
            </summary>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.Messenger.RegisterEvent">
            <summary>
            注册事件
            </summary>
        </member>
        <member name="F:Testflow.Utility.MessageUtil.Messenger._diposedFlag">
            <summary>
            销毁信使实例
            </summary>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.Messenger.DestroyMessenger(System.String)">
            <summary>
            销毁某个信使
            </summary>
            <param name="logQueueName">信使的名称</param>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.Messenger.Clear">
            <summary>
            清除消息队列的所有数据
            </summary>
        </member>
        <member name="T:Testflow.Utility.MessageUtil.MessengerOption">
            <summary>
            信使选项类
            </summary>
        </member>
        <member name="P:Testflow.Utility.MessageUtil.MessengerOption.Path">
            <summary>
            消息队列路径
            </summary>
        </member>
        <member name="P:Testflow.Utility.MessageUtil.MessengerOption.HostAddress">
            <summary>
            主机地址
            </summary>
        </member>
        <member name="P:Testflow.Utility.MessageUtil.MessengerOption.Type">
            <summary>
            信使类型
            </summary>
        </member>
        <member name="P:Testflow.Utility.MessageUtil.MessengerOption.ReceiveType">
            <summary>
            接收类型
            </summary>
        </member>
        <member name="P:Testflow.Utility.MessageUtil.MessengerOption.Formatter">
            <summary>
            格式化器类型
            </summary>
        </member>
        <member name="P:Testflow.Utility.MessageUtil.MessengerOption.TargetTypes">
            <summary>
            目标类型
            </summary>
        </member>
        <member name="P:Testflow.Utility.MessageUtil.MessengerOption.GetMsgType">
            <summary>
            根据message动态获取待反序列化数据类型的委托
            </summary>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.MessengerOption.#ctor(System.String,System.Type[])">
            <summary>
            创建信使选项类实例
            </summary>
            <param name="path">消息队列地址</param>
            <param name="targetType">目标类型</param>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.MessengerOption.#ctor(System.String,System.Func{System.String,System.Type})">
            <summary>
            创建信使选项类实例
            </summary>
            <param name="path">消息队列地址</param>
            <param name="getMsgType">返回消息对象类型的委托</param>
        </member>
        <member name="M:Testflow.Utility.MessageUtil.MessengerOption.Equals(Testflow.Utility.MessageUtil.MessengerOption)">
            <summary>
            判断两个Option是否相等
            </summary>
            <param name="comparer">待比较对象</param>
        </member>
        <member name="T:Testflow.Utility.MessageUtil.FormatterType">
            <summary>
            格式化器的类型
            </summary>
        </member>
        <member name="F:Testflow.Utility.MessageUtil.FormatterType.Xml">
            <summary>
            Xml类型的格式化器
            </summary>
        </member>
        <member name="F:Testflow.Utility.MessageUtil.FormatterType.Bin">
            <summary>
            二进制类型的格式化器
            </summary>
        </member>
        <member name="F:Testflow.Utility.MessageUtil.FormatterType.Json">
            <summary>
            json类型的格式化器
            </summary>
        </member>
        <member name="T:Testflow.Utility.MessageUtil.MessengerType">
            <summary>
            信使类型
            </summary>
        </member>
        <member name="F:Testflow.Utility.MessageUtil.MessengerType.MSMQ">
            <summary>
            使用MSMQ作为消息队列
            </summary>
        </member>
        <member name="F:Testflow.Utility.MessageUtil.MessengerType.Kafka">
            <summary>
            使用卡夫卡作为消息队列
            </summary>
        </member>
        <member name="T:Testflow.Utility.MessageUtil.ReceiveType">
            <summary>
            接收类型
            </summary>
        </member>
        <member name="F:Testflow.Utility.MessageUtil.ReceiveType.Asynchronous">
            <summary>
            异步接收
            </summary>
        </member>
        <member name="F:Testflow.Utility.MessageUtil.ReceiveType.Synchronous">
            <summary>
            同步接收
            </summary>
        </member>
        <member name="T:Testflow.Utility.ModuleErrorCode">
            <summary>
            模块异常码定义
            </summary>
        </member>
        <member name="F:Testflow.Utility.ModuleErrorCode.I18nRuntimeError">
            <summary>
            国际化模块运行时异常
            </summary>
        </member>
        <member name="F:Testflow.Utility.ModuleErrorCode.MessengerReceiveError">
            <summary>
            消息队列接收错误
            </summary>
        </member>
        <member name="F:Testflow.Utility.ModuleErrorCode.SequenceDataError">
            <summary>
            消息队列接收错误
            </summary>
        </member>
        <member name="F:Testflow.Utility.ModuleErrorCode.ExpressionError">
            <summary>
            表达式解析错误
            </summary>
        </member>
        <member name="T:Testflow.Utility.Resources.i18n_expression_en">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_expression_en.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_expression_en.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_expression_en.ExpVariableNotExist">
            <summary>
              Looks up a localized string similar to The variable &apos;{0}&apos; in expression has not declared..
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_expression_en.IllegalExpression">
            <summary>
              Looks up a localized string similar to Illegal expression value: {0}..
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_expression_en.IllegalOperatorFormat">
            <summary>
              Looks up a localized string similar to The format of operator &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="T:Testflow.Utility.Resources.i18n_utils_en">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_utils_en.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_utils_en.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_utils_en.CannotFindSequence">
            <summary>
              Looks up a localized string similar to Cannot Find Sequence Data..
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_utils_en.InvalidCallStack">
            <summary>
              Looks up a localized string similar to Invalid call stack &quot;{0}&quot;..
            </summary>
        </member>
        <member name="T:Testflow.Utility.Resources.i18n_expression_zh">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_expression_zh.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_expression_zh.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_expression_zh.ExpVariableNotExist">
            <summary>
              Looks up a localized string similar to 表达式中使用了未定义的变量{0}。.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_expression_zh.IllegalExpression">
            <summary>
              Looks up a localized string similar to 表达式‘{0}’非法。.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_expression_zh.IllegalOperatorFormat">
            <summary>
              Looks up a localized string similar to 操作符‘{0}’格式定义错误。.
            </summary>
        </member>
        <member name="T:Testflow.Utility.Resources.i18n_utils_zh">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_utils_zh.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_utils_zh.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_utils_zh.CannotFindSequence">
            <summary>
              Looks up a localized string similar to 无法找到序列数据。.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_utils_zh.InvalidCallStack">
            <summary>
              Looks up a localized string similar to 无效的调用堆栈“{0}”。.
            </summary>
        </member>
        <member name="T:Testflow.Utility.Resources.i18n_i18n_en">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_i18n_en.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_i18n_en.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_i18n_en.ItemNotExist">
            <summary>
              Looks up a localized string similar to The resource item &quot;{0}&quot; does not exist..
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_i18n_en.NotInitialized">
            <summary>
              Looks up a localized string similar to The Internationalization module is not initialized..
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_i18n_en.ResourceNotExist">
            <summary>
              Looks up a localized string similar to Resource file &quot;{0}&quot; does not exist..
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_i18n_en.UnsupportedLanguage">
            <summary>
              Looks up a localized string similar to Unsupported language type: {0}..
            </summary>
        </member>
        <member name="T:Testflow.Utility.Resources.i18n_i18n_zh">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_i18n_zh.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_i18n_zh.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_i18n_zh.ItemNotExist">
            <summary>
              Looks up a localized string similar to 资源项“{0}”不存在。.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_i18n_zh.NotInitialized">
            <summary>
              Looks up a localized string similar to 国际化模块未创建。.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_i18n_zh.ResourceNotExist">
            <summary>
              Looks up a localized string similar to 资源文件&quot;{0}&quot;不存在。.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_i18n_zh.UnsupportedLanguage">
            <summary>
              Looks up a localized string similar to 不支持的语言类型：{0}。.
            </summary>
        </member>
        <member name="T:Testflow.Utility.Resources.i18n_messenger_en">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_messenger_en.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_messenger_en.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_messenger_en.InitMessageQueueFailed">
            <summary>
              Looks up a localized string similar to Initialize message queue failed..
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_messenger_en.MessageQueueExist">
            <summary>
              Looks up a localized string similar to Message queue &quot;{0}&quot; is used by other application..
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_messenger_en.MessengerNotInitialized">
            <summary>
              Looks up a localized string similar to The messenger is not initialized..
            </summary>
        </member>
        <member name="T:Testflow.Utility.Resources.i18n_messenger_zh">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_messenger_zh.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_messenger_zh.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_messenger_zh.InitMessageQueueFailed">
            <summary>
              Looks up a localized string similar to 初始化消息队列失败。.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_messenger_zh.MessageQueueExist">
            <summary>
              Looks up a localized string similar to 消息队列“{0}”已被其他应用占用。.
            </summary>
        </member>
        <member name="P:Testflow.Utility.Resources.i18n_messenger_zh.MessengerNotInitialized">
            <summary>
              Looks up a localized string similar to 消息队列未初始化.
            </summary>
        </member>
        <member name="F:Testflow.Utility.UtilityConstants.ChineseName">
            <summary>
            中文国际化语言名
            </summary>
        </member>
        <member name="F:Testflow.Utility.UtilityConstants.EnglishName">
            <summary>
            英文国际化语言名
            </summary>
        </member>
        <member name="F:Testflow.Utility.UtilityConstants.EnglishResourceName">
            <summary>
            英文资源文件后缀
            </summary>
        </member>
        <member name="T:Testflow.Utility.I18nUtil.I18N">
            <summary>
            国际化功能类
            </summary>
        </member>
        <member name="M:Testflow.Utility.I18nUtil.I18N.GetInstance(Testflow.Utility.I18nUtil.I18NOption)">
            <summary>
            获取I18N实例
            </summary>
            <param name="option">国际化参数</param>
        </member>
        <member name="M:Testflow.Utility.I18nUtil.I18N.InitInstance(Testflow.Utility.I18nUtil.I18NOption)">
            <summary>
            初始化I18N实例，如果已经存在则返回
            </summary>
            <param name="option">国际化参数</param>
        </member>
        <member name="M:Testflow.Utility.I18nUtil.I18N.GetInstance(System.String)">
            <summary>
            获取I18n实例
            </summary>
            <param name="i18nName">i18n名称</param>
            <returns></returns>
        </member>
        <member name="M:Testflow.Utility.I18nUtil.I18N.RemoveInstance(System.String)">
            <summary>
            移除指定名称的I18n实例
            </summary>
            <param name="i18nName"></param>
        </member>
        <member name="M:Testflow.Utility.I18nUtil.I18N.RemoveInstance(Testflow.Utility.I18nUtil.I18NOption)">
            <summary>
            移除指定的I18n实例
            </summary>
            <param name="option">待删除的option实例</param>
        </member>
        <member name="M:Testflow.Utility.I18nUtil.I18N.GetStr(System.String)">
            <summary>
            根据LabelKey获取在当前环境下对应的字符串
            </summary>
            <param name="labelKey">待检索的LabelKey</param>
            <returns>国际化后的字符串</returns>
        </member>
        <member name="M:Testflow.Utility.I18nUtil.I18N.GetFStr(System.String,System.String[])">
            <summary>
            根据LabelKey获取在当前环境下对应的字符串，可以使用占位符替换指定位置的字符
            </summary>
            <param name="labelKey">待检索的LabelKey</param>
            <param name="param">替换占位符的字符集合</param>
            <returns>国际化后的字符串</returns>
        </member>
        <member name="T:Testflow.Utility.I18nUtil.I18NOption">
            <summary>
            I18n参数配置类
            </summary>
        </member>
        <member name="M:Testflow.Utility.I18nUtil.I18NOption.#ctor(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            创建I18n参数类
            </summary>
            <param name="assembly">应用的程序集</param>
            <param name="firstLanguageFile">第一语言信息所在资源文件</param>
            <param name="secondLanguageFile">第二语言信息所在资源文件</param>
        </member>
        <member name="P:Testflow.Utility.I18nUtil.I18NOption.Assembly">
            <summary>
            程序集
            </summary>
        </member>
        <member name="P:Testflow.Utility.I18nUtil.I18NOption.FirstLanguageFile">
            <summary>
            第一语言所在资源文件
            </summary>
        </member>
        <member name="P:Testflow.Utility.I18nUtil.I18NOption.SecondLanguageFile">
            <summary>
            第二语言所在资源文件
            </summary>
        </member>
        <member name="P:Testflow.Utility.I18nUtil.I18NOption.FirstLanguage">
            <summary>
            第一语言名称
            </summary>
        </member>
        <member name="P:Testflow.Utility.I18nUtil.I18NOption.SecondLanguage">
            <summary>
            第二语言名称
            </summary>
        </member>
        <member name="P:Testflow.Utility.I18nUtil.I18NOption.Name">
            <summary>
            国际化模块名称
            </summary>
        </member>
        <member name="M:Testflow.Utility.I18nUtil.I18NOption.Equals(Testflow.Utility.I18nUtil.I18NOption)">
            <summary>
            判断两个Option实例是否相等
            </summary>
        </member>
        <member name="T:Testflow.Utility.Utils.StringUtil">
            <summary>
            字符串相关处理的工具类
            </summary>
        </member>
        <member name="M:Testflow.Utility.Utils.StringUtil.NormalizeFilePath(System.String)">
            <summary>
            规范化文件路径
            </summary>
        </member>
        <member name="M:Testflow.Utility.Utils.StringUtil.NormalizeDirectory(System.String)">
            <summary>
            规范化文件夹
            </summary>
        </member>
        <member name="T:Testflow.Utility.Utils.SequenceUtils">
            <summary>
            序列操作相关的工具函数
            </summary>
        </member>
        <member name="M:Testflow.Utility.Utils.SequenceUtils.GetStepFromStack(Testflow.Data.Sequence.ITestProject,Testflow.Runtime.ICallStack)">
            <summary>
            通过Stack获取Step
            </summary>
        </member>
        <member name="M:Testflow.Utility.Utils.SequenceUtils.GetStepFromStack(Testflow.Data.Sequence.ISequenceGroup,Testflow.Runtime.ICallStack)">
            <summary>
            通过Stack获取Step
            </summary>
        </member>
        <member name="M:Testflow.Utility.Utils.SequenceUtils.GetStepFromStack(Testflow.Data.Sequence.ITestProject,System.String)">
            <summary>
            通过Stack获取Step
            </summary>
        </member>
        <member name="M:Testflow.Utility.Utils.SequenceUtils.GetStepFromStack(Testflow.Data.Sequence.ISequenceGroup,System.String)">
            <summary>
            通过Stack获取Step
            </summary>
        </member>
        <member name="M:Testflow.Utility.Utils.SequenceUtils.TryGetStepFromStack(Testflow.Data.Sequence.ITestProject,Testflow.Runtime.ICallStack,Testflow.Data.Sequence.ISequenceStep@)">
            <summary>
            通过Stack获取Step
            </summary>
        </member>
        <member name="M:Testflow.Utility.Utils.SequenceUtils.TryGetStepFromStack(Testflow.Data.Sequence.ISequenceGroup,Testflow.Runtime.ICallStack,Testflow.Data.Sequence.ISequenceStep@)">
            <summary>
            通过Stack获取Step
            </summary>
        </member>
        <member name="M:Testflow.Utility.Utils.SequenceUtils.TryGetStepFromStack(Testflow.Data.Sequence.ITestProject,System.String,Testflow.Data.Sequence.ISequenceStep@)">
            <summary>
            通过Stack获取Step
            </summary>
        </member>
        <member name="M:Testflow.Utility.Utils.SequenceUtils.TryGetStepFromStack(Testflow.Data.Sequence.ISequenceGroup,System.String,Testflow.Data.Sequence.ISequenceStep@)">
            <summary>
            通过Stack获取Step
            </summary>
        </member>
        <member name="M:Testflow.Utility.Utils.SequenceUtils.GetSequence(Testflow.Data.Sequence.ISequenceFlowContainer,System.Int32,System.Int32)">
            <summary>
            通过索引号获取Sequence
            </summary>
        </member>
        <member name="M:Testflow.Utility.Utils.SequenceUtils.GetParentSequence(Testflow.Data.Sequence.ISequenceStep)">
            <summary>
            获取某个序列步骤所在的序列
            </summary>
            <param name="step">序列步骤</param>
        </member>
        <member name="M:Testflow.Utility.Utils.SequenceUtils.IsVariableExist(System.String,Testflow.Data.Sequence.ISequenceStep)">
            <summary>
            判断某个名字的变量是否存在
            </summary>
            <param name="variableName">变量名</param>
            <param name="step">使用变量的序列步骤</param>
        </member>
        <member name="M:Testflow.Utility.Utils.SequenceUtils.IsVariableExist(System.String,Testflow.Data.Sequence.ISequence)">
            <summary>
            判断某个名字的变量是否存在
            </summary>
            <param name="variableName">变量名</param>
            <param name="sequence">使用变量的序列</param>
        </member>
    </members>
</doc>
